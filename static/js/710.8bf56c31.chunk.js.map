{"version":3,"file":"static/js/710.8bf56c31.chunk.js","mappings":"gSAIaA,EAAcC,EAAAA,GAAAA,IAAAA,WAAU,CAAAC,YAAA,cAAAC,YAAA,gBAAVF,CAAU,uOAqBxBG,EAAQH,EAAAA,GAAAA,GAAAA,WAAS,CAAAC,YAAA,QAAAC,YAAA,gBAATF,CAAS,mGAClBI,EAAAA,EAAAA,GAACC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,aACKF,EAAAA,EAAAA,GAACG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,a,WCwDnB,MAvEA,WAAiB,IAADE,EACRC,GAAWC,EAAAA,EAAAA,MAETC,GAASC,EAAAA,EAAAA,IAAe,CAC9BC,IAAK,yBACLC,OAAQ,CACNC,SAAU,CACRC,GAAI,WAJFL,KASFM,EAAOC,EAAAA,KAAAA,SAAmC,QAAtBV,EAACG,EAAKA,EAAKQ,OAAS,UAAE,IAAAX,OAAA,EAArBA,EAAuBY,YAE5CC,GAAaC,EAAAA,EAAAA,UAAQ,WASzB,OARmBC,EAAAA,EAAAA,GACd,IAAIC,IACLb,EAAKc,KAAI,SAACC,GAAS,OACjB,IAAIC,KAAKD,EAAKN,YAAYQ,cAAcC,UAAU,MAKxCJ,KAAI,SAAAC,GAClB,IAAMI,EAAW,CAAEC,KAAML,EAAMM,KAAM,IAOrC,OANArB,EAAKsB,SAAQ,SAACC,GACRA,EAAEd,WAAWe,SAAST,IACxBI,EAAIE,KAAKI,KAAKF,EAElB,IAEOJ,CACT,GACF,GAAG,CAACnB,IAEJ,OACE0B,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACC,MAAM,eAAIC,UACfC,EAAAA,EAAAA,MAAC1C,EAAW,CAAAyC,SAAA,EACVC,EAAAA,EAAAA,MAACtC,EAAK,CAAAqC,SAAA,CAAC,2BAEJvB,EAAKc,KAAK,eAAGd,EAAKyB,MAAM,kCAAO/B,EAAKQ,OAAO,wBAG7CE,EAAWI,KAAI,SAAAkB,GAAA,IAAGZ,EAAIY,EAAJZ,KAAMC,EAAIW,EAAJX,KAAI,OAC3BS,EAAAA,EAAAA,MAACG,EAAAA,SAAc,CAAAJ,SAAA,EACbH,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,CAACC,YAAY,OAAOC,UAAU,OAAMP,SACzCT,KAGHM,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACHC,UAAQ,EACR5B,WAAYW,EACZkB,SAAUvC,EAAKQ,OACfgC,WAAY,SAACzB,GAAS,OACpBW,EAAAA,EAAAA,KAAA,OAAKe,QAAS,kBAAM3C,EAAS,YAAD4C,OAAa3B,EAAKV,IAAK,EAACwB,UAClDC,EAAAA,EAAAA,MAACO,EAAAA,EAAAA,KAAS,CAACD,UAAU,WAAUP,SAAA,EAC7BC,EAAAA,EAAAA,MAACa,EAAAA,EAAAA,KAAe,CAACC,MAAI,EAAAf,SAAA,CAAC,IAClBtB,EAAAA,KAAAA,MAAWQ,EAAKN,WAAY,SAAS,OACtB,IAClBM,EAAKa,UAEJ,MAjBSR,EAoBJ,QAK3B,C","sources":["views/library/File/styled.ts","views/library/File/index.tsx"],"sourcesContent":["import { Plate } from \"@/components\";\r\nimport { r } from \"@/utils\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const FileWrapper = styled.div`\r\n  .fileTitle {\r\n    font-weight: bold;\r\n    font-size: 25px;\r\n  }\r\n  .fileList {\r\n    color: var(--ant-primary-7) !important;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n  }\r\n  .fileList:hover {\r\n    opacity: 0.8;\r\n  }\r\n  .year::before,\r\n  .year::after {\r\n    border-top-color: #999;\r\n  }\r\n  .count {\r\n    font-size: 20px;\r\n  }\r\n`;\r\nexport const Title = styled.h2`\r\n  margin: ${r`15px`} 0;\r\n  padding-left: ${r`20px`};\r\n  border-left: 5px solid var(--ant-primary-color);\r\n  font-weight: 700;\r\n`;\r\n","import { Plate } from '@/components';\r\nimport { useQuery } from '@/hooks';\r\nimport { Divider, List, Typography } from 'antd';\r\nimport { time } from 'hyl-utils';\r\nimport React, { useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FileWrapper, Title } from './styled';\r\n\r\ntype Data = {\r\n  createTime: string;\r\n};\r\n\r\nfunction File() {\r\n  const navigate = useNavigate();\r\n\r\n  const { data } = useQuery<Data>({\r\n    url: '/current/query/article',\r\n    params: {\r\n      orderBys: {\r\n        id: 'desc',\r\n      },\r\n    },\r\n  });\r\n\r\n  const diff = time.duration(data[data.length - 1]?.createTime);\r\n\r\n  const dataSource = useMemo(() => {\r\n    const yearKeys: any = [\r\n      ...new Set(\r\n        data.map((item: any) =>\r\n          new Date(item.createTime).getFullYear().toString()\r\n        )\r\n      ),\r\n    ];\r\n\r\n    return yearKeys.map(item => {\r\n      const obj: any = { year: item, list: [] };\r\n      data.forEach((v: any) => {\r\n        if (v.createTime.includes(item)) {\r\n          obj.list.push(v);\r\n        }\r\n      });\r\n\r\n      return obj;\r\n    });\r\n  }, [data]);\r\n\r\n  return (\r\n    <Plate title='归档'>\r\n      <FileWrapper>\r\n        <Title>\r\n          居然用了\r\n          {diff.year}年零{diff.month}个月 才写了{data.length}\r\n          篇文章\r\n        </Title>\r\n        {dataSource.map(({ year, list }) => (\r\n          <React.Fragment key={year}>\r\n            <Divider orientation='left' className='year'>\r\n              {year}\r\n            </Divider>\r\n\r\n            <List\r\n              bordered\r\n              dataSource={list}\r\n              loading={!data.length}\r\n              renderItem={(item: any) => (\r\n                <div onClick={() => navigate(`/article/${item.id}`)}>\r\n                  <List.Item className='fileList'>\r\n                    <Typography.Text mark>\r\n                      [{time.parse(item.createTime, 'MM-DD')}]\r\n                    </Typography.Text>{' '}\r\n                    {item.title}\r\n                  </List.Item>\r\n                </div>\r\n              )}\r\n            />\r\n          </React.Fragment>\r\n        ))}\r\n      </FileWrapper>\r\n    </Plate>\r\n  );\r\n}\r\n\r\nexport default File;\r\n"],"names":["FileWrapper","styled","displayName","componentId","Title","r","_templateObject","_taggedTemplateLiteral","_templateObject2","_data","navigate","useNavigate","data","useQuery","url","params","orderBys","id","diff","time","length","createTime","dataSource","useMemo","_toConsumableArray","Set","map","item","Date","getFullYear","toString","obj","year","list","forEach","v","includes","push","_jsx","Plate","title","children","_jsxs","month","_ref","React","Divider","orientation","className","List","bordered","loading","renderItem","onClick","concat","Typography","mark"],"sourceRoot":""}